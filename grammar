lista de todos los tokens
==========================

'INT', FLOAT, WHILE, IF, THEN, ELSE, BEGIN, DO, END, PRINT, WRITE, READ, 'SKIP', 'RETURN', 'BREAK', 'AND', 'OR', 'NOT', 'FUN', 'ID',

ASIG	::= ':='
INUM	::= '\d+'
FNUM	::= '(\d*\.d+)(E[\+-]?|([1-9]\d*E[\+-]?\d+)'
STRING	::= '"."'
ID	    ::= '[a-zA-Z_][a-zA-Z0-9]_'
COMEN	::= '/\*(.|\n|\"|\\)*?\*/'
LT	    ::= '<'
LE	    ::= '<=
GT	    ::= '>'
GE	    ::= '>='
EQ	    ::= '='
NE	    ::= '!='
MAS	    ::= '+'
MENOS	::= '-'
DIV	    ::= '/'
MUL	    ::= '*'
PARI	::= '('
PARD	::= ')'
COMA	::= ','
DPUN	::= ':'
CORI	::= '['
CORD	::= ']'
PCOMA	::= ';'
PUN	    ::= '.'
AND 	::= 'and'

Gramatica independiente del contexto
=====================================
programa ::= funcion
          |  programa funcion
          ;  

funcion ::= FUN ID argumento locales sentencia
          ;

argumento ::= PARI PARD
          |   PARI declaracion PARD
          ;

declaracion ::= ID DPUN type 
            |   declaracion COMA declaracion
            |   vacio
            ;

locales ::= ID DPUN type 
            |   declaracion PCOMA declaracion
            ;

sentencia ::= 'begin' lineas 'end'
    ;

lineas ::= linea 
       | lineas PCOMA linea
       ;

linea ::= expre 
    | write 
    | read
    | print 
    | assing
    | RETURN expre
    | ID PARI expre PARD
    | SKIP 
    | BREAK
    | while
    ;


while :== while relacion DO sentencia
    ; 

if ::= if relacion 'then' sentencia  else  
    ;

else ::= ELSE sentencia
      | vacio 
      ; 

write::= write PARI expre PARD
     ;

read ::= read PARI location PARD
     ; 

print ::= print PARI STRING PARD 
      ;

assing   ::= ID := expre
            ;

location ::= ID
         |   ID CORI expre CORD
        ;

relacion ::=  expre condicion expre 
         |   relacion AND relacion
         |   relacion OR relacion
         |   NOT relacion
         |   PARI relacion PARD
              ;

condicion ::= LT
    | LE
    | GT
    | GE
    | EQ
    | NE
    ;

type    ::= FLOAT
        | INT
        | FLOAT CORI expre CORD
        | INT CORI expre CORD
        ;

exprelist ::=  expre COMA exprelist
            |  expre
            ;

expre   ::= expre  MAS expre 
        |   expre  MENOS expre
        |   expre  MUL expre 
        |   expre  DIV expre  
        |   MENOS expre 
        |   MAS   expre   
        |   ID PARI exprelist PARD
        |   ID
        |   ID CORI expre CORD
        |   INUM
        |   FNUM
        |   INT PARI expre PARD
        |   FLOAR PARI expre PARD 
        ;